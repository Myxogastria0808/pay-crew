/**
 * Generated by orval v7.13.0 🍺
 * Do not edit manually.
 * Echo API
 * 受け取った入力値をそのまま応答するAPI
 * OpenAPI spec version: 1.0.0
 */
import { faker } from '@faker-js/faker';

import { HttpResponse, delay, http } from 'msw';
import type { RequestHandlerOptions } from 'msw';

import type { GetUsers200Item, GetUsers500, PostUsers201Item, PostUsers500 } from './api.schemas';

export const getGetUsersResponseMock = (): GetUsers200Item[] =>
  Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
    id: faker.number.float({ min: 1, max: undefined, fractionDigits: 2 }),
    name: faker.string.alpha({ length: { min: 1, max: 20 } }),
    email: faker.internet.email(),
    password: faker.string.alpha({ length: { min: 6, max: 20 } }),
  }));

export const getGetUsersResponseMock200 = (): GetUsers200Item[] =>
  Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
    id: faker.number.float({ min: 1, max: undefined, fractionDigits: 2 }),
    name: faker.string.alpha({ length: { min: 1, max: 20 } }),
    email: faker.internet.email(),
    password: faker.string.alpha({ length: { min: 6, max: 20 } }),
  }));

export const getGetUsersResponseMock500 = (overrideResponse: Partial<GetUsers500> = {}): GetUsers500 => ({
  status: faker.helpers.arrayElement([
    faker.helpers.arrayElement([100] as const),
    faker.helpers.arrayElement([102] as const),
    faker.helpers.arrayElement([103] as const),
    faker.helpers.arrayElement([200] as const),
    faker.helpers.arrayElement([201] as const),
    faker.helpers.arrayElement([202] as const),
    faker.helpers.arrayElement([203] as const),
    faker.helpers.arrayElement([206] as const),
    faker.helpers.arrayElement([207] as const),
    faker.helpers.arrayElement([208] as const),
    faker.helpers.arrayElement([226] as const),
    faker.helpers.arrayElement([300] as const),
    faker.helpers.arrayElement([301] as const),
    faker.helpers.arrayElement([302] as const),
    faker.helpers.arrayElement([303] as const),
    faker.helpers.arrayElement([305] as const),
    faker.helpers.arrayElement([306] as const),
    faker.helpers.arrayElement([307] as const),
    faker.helpers.arrayElement([308] as const),
    faker.helpers.arrayElement([400] as const),
    faker.helpers.arrayElement([401] as const),
    faker.helpers.arrayElement([402] as const),
    faker.helpers.arrayElement([403] as const),
    faker.helpers.arrayElement([404] as const),
    faker.helpers.arrayElement([405] as const),
    faker.helpers.arrayElement([406] as const),
    faker.helpers.arrayElement([407] as const),
    faker.helpers.arrayElement([408] as const),
    faker.helpers.arrayElement([409] as const),
    faker.helpers.arrayElement([410] as const),
    faker.helpers.arrayElement([411] as const),
    faker.helpers.arrayElement([412] as const),
    faker.helpers.arrayElement([413] as const),
    faker.helpers.arrayElement([414] as const),
    faker.helpers.arrayElement([415] as const),
    faker.helpers.arrayElement([416] as const),
    faker.helpers.arrayElement([417] as const),
    faker.helpers.arrayElement([418] as const),
    faker.helpers.arrayElement([421] as const),
    faker.helpers.arrayElement([422] as const),
    faker.helpers.arrayElement([423] as const),
    faker.helpers.arrayElement([424] as const),
    faker.helpers.arrayElement([425] as const),
    faker.helpers.arrayElement([426] as const),
    faker.helpers.arrayElement([428] as const),
    faker.helpers.arrayElement([429] as const),
    faker.helpers.arrayElement([431] as const),
    faker.helpers.arrayElement([451] as const),
    faker.helpers.arrayElement([500] as const),
    faker.helpers.arrayElement([501] as const),
    faker.helpers.arrayElement([502] as const),
    faker.helpers.arrayElement([503] as const),
    faker.helpers.arrayElement([504] as const),
    faker.helpers.arrayElement([505] as const),
    faker.helpers.arrayElement([506] as const),
    faker.helpers.arrayElement([507] as const),
    faker.helpers.arrayElement([508] as const),
    faker.helpers.arrayElement([510] as const),
    faker.helpers.arrayElement([511] as const),
    faker.helpers.arrayElement([-1] as const),
  ]),
  message: faker.string.alpha({ length: { min: 1, max: 20 } }),
  ...overrideResponse,
});

export const getPostUsersResponseMock = (): PostUsers201Item[] =>
  Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
    id: faker.number.float({ min: 1, max: undefined, fractionDigits: 2 }),
    name: faker.string.alpha({ length: { min: 1, max: 20 } }),
    email: faker.internet.email(),
    password: faker.string.alpha({ length: { min: 6, max: 20 } }),
  }));

export const getPostUsersResponseMock201 = (): PostUsers201Item[] =>
  Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
    id: faker.number.float({ min: 1, max: undefined, fractionDigits: 2 }),
    name: faker.string.alpha({ length: { min: 1, max: 20 } }),
    email: faker.internet.email(),
    password: faker.string.alpha({ length: { min: 6, max: 20 } }),
  }));

export const getPostUsersResponseMock500 = (overrideResponse: Partial<PostUsers500> = {}): PostUsers500 => ({
  status: faker.helpers.arrayElement([
    faker.helpers.arrayElement([100] as const),
    faker.helpers.arrayElement([102] as const),
    faker.helpers.arrayElement([103] as const),
    faker.helpers.arrayElement([200] as const),
    faker.helpers.arrayElement([201] as const),
    faker.helpers.arrayElement([202] as const),
    faker.helpers.arrayElement([203] as const),
    faker.helpers.arrayElement([206] as const),
    faker.helpers.arrayElement([207] as const),
    faker.helpers.arrayElement([208] as const),
    faker.helpers.arrayElement([226] as const),
    faker.helpers.arrayElement([300] as const),
    faker.helpers.arrayElement([301] as const),
    faker.helpers.arrayElement([302] as const),
    faker.helpers.arrayElement([303] as const),
    faker.helpers.arrayElement([305] as const),
    faker.helpers.arrayElement([306] as const),
    faker.helpers.arrayElement([307] as const),
    faker.helpers.arrayElement([308] as const),
    faker.helpers.arrayElement([400] as const),
    faker.helpers.arrayElement([401] as const),
    faker.helpers.arrayElement([402] as const),
    faker.helpers.arrayElement([403] as const),
    faker.helpers.arrayElement([404] as const),
    faker.helpers.arrayElement([405] as const),
    faker.helpers.arrayElement([406] as const),
    faker.helpers.arrayElement([407] as const),
    faker.helpers.arrayElement([408] as const),
    faker.helpers.arrayElement([409] as const),
    faker.helpers.arrayElement([410] as const),
    faker.helpers.arrayElement([411] as const),
    faker.helpers.arrayElement([412] as const),
    faker.helpers.arrayElement([413] as const),
    faker.helpers.arrayElement([414] as const),
    faker.helpers.arrayElement([415] as const),
    faker.helpers.arrayElement([416] as const),
    faker.helpers.arrayElement([417] as const),
    faker.helpers.arrayElement([418] as const),
    faker.helpers.arrayElement([421] as const),
    faker.helpers.arrayElement([422] as const),
    faker.helpers.arrayElement([423] as const),
    faker.helpers.arrayElement([424] as const),
    faker.helpers.arrayElement([425] as const),
    faker.helpers.arrayElement([426] as const),
    faker.helpers.arrayElement([428] as const),
    faker.helpers.arrayElement([429] as const),
    faker.helpers.arrayElement([431] as const),
    faker.helpers.arrayElement([451] as const),
    faker.helpers.arrayElement([500] as const),
    faker.helpers.arrayElement([501] as const),
    faker.helpers.arrayElement([502] as const),
    faker.helpers.arrayElement([503] as const),
    faker.helpers.arrayElement([504] as const),
    faker.helpers.arrayElement([505] as const),
    faker.helpers.arrayElement([506] as const),
    faker.helpers.arrayElement([507] as const),
    faker.helpers.arrayElement([508] as const),
    faker.helpers.arrayElement([510] as const),
    faker.helpers.arrayElement([511] as const),
    faker.helpers.arrayElement([-1] as const),
  ]),
  message: faker.string.alpha({ length: { min: 1, max: 20 } }),
  ...overrideResponse,
});

export const getGetUsersMockHandler = (
  overrideResponse?:
    | GetUsers200Item[]
    | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<GetUsers200Item[]> | GetUsers200Item[]),
  options?: RequestHandlerOptions
) => {
  return http.get(
    '*/users',
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === 'function'
              ? await overrideResponse(info)
              : overrideResponse
            : getGetUsersResponseMock()
        ),
        { status: 200, headers: { 'Content-Type': 'application/json' } }
      );
    },
    options
  );
};

export const getGetUsersMockHandler200 = (
  overrideResponse?:
    | GetUsers200Item[]
    | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<GetUsers200Item[]> | GetUsers200Item[]),
  options?: RequestHandlerOptions
) => {
  return http.get(
    '*/users',
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === 'function'
              ? await overrideResponse(info)
              : overrideResponse
            : getGetUsersResponseMock200()
        ),
        { status: 200, headers: { 'Content-Type': 'application/json' } }
      );
    },
    options
  );
};

export const getGetUsersMockHandler500 = (
  overrideResponse?:
    | GetUsers500
    | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<GetUsers500> | GetUsers500),
  options?: RequestHandlerOptions
) => {
  return http.get(
    '*/users',
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === 'function'
              ? await overrideResponse(info)
              : overrideResponse
            : getGetUsersResponseMock500()
        ),
        { status: 500, headers: { 'Content-Type': 'application/json' } }
      );
    },
    options
  );
};

export const getPostUsersMockHandler = (
  overrideResponse?:
    | PostUsers201Item[]
    | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<PostUsers201Item[]> | PostUsers201Item[]),
  options?: RequestHandlerOptions
) => {
  return http.post(
    '*/users',
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === 'function'
              ? await overrideResponse(info)
              : overrideResponse
            : getPostUsersResponseMock()
        ),
        { status: 201, headers: { 'Content-Type': 'application/json' } }
      );
    },
    options
  );
};

export const getPostUsersMockHandler201 = (
  overrideResponse?:
    | PostUsers201Item[]
    | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<PostUsers201Item[]> | PostUsers201Item[]),
  options?: RequestHandlerOptions
) => {
  return http.post(
    '*/users',
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === 'function'
              ? await overrideResponse(info)
              : overrideResponse
            : getPostUsersResponseMock201()
        ),
        { status: 201, headers: { 'Content-Type': 'application/json' } }
      );
    },
    options
  );
};

export const getPostUsersMockHandler500 = (
  overrideResponse?:
    | PostUsers500
    | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<PostUsers500> | PostUsers500),
  options?: RequestHandlerOptions
) => {
  return http.post(
    '*/users',
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === 'function'
              ? await overrideResponse(info)
              : overrideResponse
            : getPostUsersResponseMock500()
        ),
        { status: 500, headers: { 'Content-Type': 'application/json' } }
      );
    },
    options
  );
};
export const getEchoAPIMock = () => [getGetUsersMockHandler(), getPostUsersMockHandler()];
