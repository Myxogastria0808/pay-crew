/**
 * Generated by orval v7.13.2 üç∫
 * Do not edit manually.
 * Echo API
 * Âèó„ÅëÂèñ„Å£„ÅüÂÖ•ÂäõÂÄ§„Çí„Åù„ÅÆ„Åæ„ÅæÂøúÁ≠î„Åô„ÇãAPI
 * OpenAPI spec version: 1.0.0
 */
import useSwr from 'swr';
import type { Key, SWRConfiguration } from 'swr';

import useSWRMutation from 'swr/mutation';
import type { SWRMutationConfiguration } from 'swr/mutation';

import type {
  DeleteApiHistorys200,
  DeleteApiHistorys500,
  DeleteApiHistorysBody,
  GetApiHistorys200Item,
  GetApiHistorys500,
  PostApiHistorys201,
  PostApiHistorys500,
  PostApiHistorysBody,
} from './api.schemas';

import { customFetch } from './customFetch';

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * Â±•Ê≠¥„ÅÆÂèñÂæó
 */
export type getApiHistorysResponse200 = {
  data: GetApiHistorys200Item[];
  status: 200;
};

export type getApiHistorysResponse500 = {
  data: GetApiHistorys500;
  status: 500;
};

export type getApiHistorysResponseSuccess = getApiHistorysResponse200 & {
  headers: Headers;
};
export type getApiHistorysResponseError = getApiHistorysResponse500 & {
  headers: Headers;
};

export type getApiHistorysResponse = getApiHistorysResponseSuccess | getApiHistorysResponseError;

export const getGetApiHistorysUrl = () => {
  return `/api/historys`;
};

export const getApiHistorys = async (options?: RequestInit): Promise<getApiHistorysResponse> => {
  return customFetch<getApiHistorysResponse>(getGetApiHistorysUrl(), {
    ...options,
    method: 'GET',
  });
};

export const getGetApiHistorysKey = () => [`/api/historys`] as const;

export type GetApiHistorysQueryResult = NonNullable<Awaited<ReturnType<typeof getApiHistorys>>>;
export type GetApiHistorysQueryError = GetApiHistorys500;

export const useGetApiHistorys = <TError = GetApiHistorys500>(options?: {
  swr?: SWRConfiguration<Awaited<ReturnType<typeof getApiHistorys>>, TError> & { swrKey?: Key; enabled?: boolean };
  request?: SecondParameter<typeof customFetch>;
}) => {
  const { swr: swrOptions, request: requestOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false;
  const swrKey = swrOptions?.swrKey ?? (() => (isEnabled ? getGetApiHistorysKey() : null));
  const swrFn = () => getApiHistorys(requestOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions);

  return {
    swrKey,
    ...query,
  };
};

/**
 * Â±•Ê≠¥„ÅÆËøΩÂä†
 */
export type postApiHistorysResponse201 = {
  data: PostApiHistorys201;
  status: 201;
};

export type postApiHistorysResponse500 = {
  data: PostApiHistorys500;
  status: 500;
};

export type postApiHistorysResponseSuccess = postApiHistorysResponse201 & {
  headers: Headers;
};
export type postApiHistorysResponseError = postApiHistorysResponse500 & {
  headers: Headers;
};

export type postApiHistorysResponse = postApiHistorysResponseSuccess | postApiHistorysResponseError;

export const getPostApiHistorysUrl = () => {
  return `/api/historys`;
};

export const postApiHistorys = async (
  postApiHistorysBody: PostApiHistorysBody,
  options?: RequestInit
): Promise<postApiHistorysResponse> => {
  return customFetch<postApiHistorysResponse>(getPostApiHistorysUrl(), {
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(postApiHistorysBody),
  });
};

export const getPostApiHistorysMutationFetcher = (options?: SecondParameter<typeof customFetch>) => {
  return (_: Key, { arg }: { arg: PostApiHistorysBody }) => {
    return postApiHistorys(arg, options);
  };
};
export const getPostApiHistorysMutationKey = () => [`/api/historys`] as const;

export type PostApiHistorysMutationResult = NonNullable<Awaited<ReturnType<typeof postApiHistorys>>>;
export type PostApiHistorysMutationError = PostApiHistorys500;

export const usePostApiHistorys = <TError = PostApiHistorys500>(options?: {
  swr?: SWRMutationConfiguration<
    Awaited<ReturnType<typeof postApiHistorys>>,
    TError,
    Key,
    PostApiHistorysBody,
    Awaited<ReturnType<typeof postApiHistorys>>
  > & { swrKey?: string };
  request?: SecondParameter<typeof customFetch>;
}) => {
  const { swr: swrOptions, request: requestOptions } = options ?? {};

  const swrKey = swrOptions?.swrKey ?? getPostApiHistorysMutationKey();
  const swrFn = getPostApiHistorysMutationFetcher(requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions);

  return {
    swrKey,
    ...query,
  };
};

/**
 * Â±•Ê≠¥„ÅÆÂâäÈô§
 */
export type deleteApiHistorysResponse200 = {
  data: DeleteApiHistorys200;
  status: 200;
};

export type deleteApiHistorysResponse500 = {
  data: DeleteApiHistorys500;
  status: 500;
};

export type deleteApiHistorysResponseSuccess = deleteApiHistorysResponse200 & {
  headers: Headers;
};
export type deleteApiHistorysResponseError = deleteApiHistorysResponse500 & {
  headers: Headers;
};

export type deleteApiHistorysResponse = deleteApiHistorysResponseSuccess | deleteApiHistorysResponseError;

export const getDeleteApiHistorysUrl = () => {
  return `/api/historys`;
};

export const deleteApiHistorys = async (
  deleteApiHistorysBody: DeleteApiHistorysBody,
  options?: RequestInit
): Promise<deleteApiHistorysResponse> => {
  return customFetch<deleteApiHistorysResponse>(getDeleteApiHistorysUrl(), {
    ...options,
    method: 'DELETE',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(deleteApiHistorysBody),
  });
};

export const getDeleteApiHistorysMutationFetcher = (options?: SecondParameter<typeof customFetch>) => {
  return (_: Key, { arg }: { arg: DeleteApiHistorysBody }) => {
    return deleteApiHistorys(arg, options);
  };
};
export const getDeleteApiHistorysMutationKey = () => [`/api/historys`] as const;

export type DeleteApiHistorysMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiHistorys>>>;
export type DeleteApiHistorysMutationError = DeleteApiHistorys500;

export const useDeleteApiHistorys = <TError = DeleteApiHistorys500>(options?: {
  swr?: SWRMutationConfiguration<
    Awaited<ReturnType<typeof deleteApiHistorys>>,
    TError,
    Key,
    DeleteApiHistorysBody,
    Awaited<ReturnType<typeof deleteApiHistorys>>
  > & { swrKey?: string };
  request?: SecondParameter<typeof customFetch>;
}) => {
  const { swr: swrOptions, request: requestOptions } = options ?? {};

  const swrKey = swrOptions?.swrKey ?? getDeleteApiHistorysMutationKey();
  const swrFn = getDeleteApiHistorysMutationFetcher(requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions);

  return {
    swrKey,
    ...query,
  };
};
