/**
 * Generated by orval v7.13.0 üç∫
 * Do not edit manually.
 * Echo API
 * Âèó„ÅëÂèñ„Å£„ÅüÂÖ•ÂäõÂÄ§„Çí„Åù„ÅÆ„Åæ„ÅæÂøúÁ≠î„Åô„ÇãAPI
 * OpenAPI spec version: 1.0.0
 */
import useSwr from 'swr';
import type { Key, SWRConfiguration } from 'swr';

import useSWRMutation from 'swr/mutation';
import type { SWRMutationConfiguration } from 'swr/mutation';

import type { GetUsers200Item, GetUsers500, PostUsers201Item, PostUsers500, PostUsersBody } from './api.schemas';

import { customFetch } from './customFetch';

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * „É¶„Éº„Ç∂„Éº„ÅÆÂèñÂæó
 */
export type getUsersResponse200 = {
  data: GetUsers200Item[];
  status: 200;
};

export type getUsersResponse500 = {
  data: GetUsers500;
  status: 500;
};

export type getUsersResponseSuccess = getUsersResponse200 & {
  headers: Headers;
};
export type getUsersResponseError = getUsersResponse500 & {
  headers: Headers;
};

export type getUsersResponse = getUsersResponseSuccess | getUsersResponseError;

export const getGetUsersUrl = () => {
  return `/users`;
};

export const getUsers = async (options?: RequestInit): Promise<getUsersResponse> => {
  return customFetch<getUsersResponse>(getGetUsersUrl(), {
    ...options,
    method: 'GET',
  });
};

export const getGetUsersKey = () => [`/users`] as const;

export type GetUsersQueryResult = NonNullable<Awaited<ReturnType<typeof getUsers>>>;
export type GetUsersQueryError = GetUsers500;

export const useGetUsers = <TError = GetUsers500>(options?: {
  swr?: SWRConfiguration<Awaited<ReturnType<typeof getUsers>>, TError> & { swrKey?: Key; enabled?: boolean };
  request?: SecondParameter<typeof customFetch>;
}) => {
  const { swr: swrOptions, request: requestOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false;
  const swrKey = swrOptions?.swrKey ?? (() => (isEnabled ? getGetUsersKey() : null));
  const swrFn = () => getUsers(requestOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions);

  return {
    swrKey,
    ...query,
  };
};

/**
 * „É¶„Éº„Ç∂„Éº„ÅÆ‰ΩúÊàê
 */
export type postUsersResponse201 = {
  data: PostUsers201Item[];
  status: 201;
};

export type postUsersResponse500 = {
  data: PostUsers500;
  status: 500;
};

export type postUsersResponseSuccess = postUsersResponse201 & {
  headers: Headers;
};
export type postUsersResponseError = postUsersResponse500 & {
  headers: Headers;
};

export type postUsersResponse = postUsersResponseSuccess | postUsersResponseError;

export const getPostUsersUrl = () => {
  return `/users`;
};

export const postUsers = async (postUsersBody: PostUsersBody, options?: RequestInit): Promise<postUsersResponse> => {
  return customFetch<postUsersResponse>(getPostUsersUrl(), {
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(postUsersBody),
  });
};

export const getPostUsersMutationFetcher = (options?: SecondParameter<typeof customFetch>) => {
  return (_: Key, { arg }: { arg: PostUsersBody }) => {
    return postUsers(arg, options);
  };
};
export const getPostUsersMutationKey = () => [`/users`] as const;

export type PostUsersMutationResult = NonNullable<Awaited<ReturnType<typeof postUsers>>>;
export type PostUsersMutationError = PostUsers500;

export const usePostUsers = <TError = PostUsers500>(options?: {
  swr?: SWRMutationConfiguration<
    Awaited<ReturnType<typeof postUsers>>,
    TError,
    Key,
    PostUsersBody,
    Awaited<ReturnType<typeof postUsers>>
  > & { swrKey?: string };
  request?: SecondParameter<typeof customFetch>;
}) => {
  const { swr: swrOptions, request: requestOptions } = options ?? {};

  const swrKey = swrOptions?.swrKey ?? getPostUsersMutationKey();
  const swrFn = getPostUsersMutationFetcher(requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions);

  return {
    swrKey,
    ...query,
  };
};
