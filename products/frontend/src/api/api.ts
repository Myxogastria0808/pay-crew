/**
 * Generated by orval v7.13.2 üç∫
 * Do not edit manually.
 * Echo API
 * Âèó„ÅëÂèñ„Å£„ÅüÂÖ•ÂäõÂÄ§„Çí„Åù„ÅÆ„Åæ„ÅæÂøúÁ≠î„Åô„ÇãAPI
 * OpenAPI spec version: 1.0.0
 */
import useSwr from 'swr';
import type { Key, SWRConfiguration } from 'swr';

import useSWRMutation from 'swr/mutation';
import type { SWRMutationConfiguration } from 'swr/mutation';

import type {
  GetApiUsers200Item,
  GetApiUsers500,
  PostApiUsers201Item,
  PostApiUsers500,
  PostApiUsersBody,
} from './api.schemas';

import { customFetch } from './customFetch';

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * „É¶„Éº„Ç∂„Éº„ÅÆÂèñÂæó
 */
export type getApiUsersResponse200 = {
  data: GetApiUsers200Item[];
  status: 200;
};

export type getApiUsersResponse500 = {
  data: GetApiUsers500;
  status: 500;
};

export type getApiUsersResponseSuccess = getApiUsersResponse200 & {
  headers: Headers;
};
export type getApiUsersResponseError = getApiUsersResponse500 & {
  headers: Headers;
};

export type getApiUsersResponse = getApiUsersResponseSuccess | getApiUsersResponseError;

export const getGetApiUsersUrl = () => {
  return `/api/users`;
};

export const getApiUsers = async (options?: RequestInit): Promise<getApiUsersResponse> => {
  return customFetch<getApiUsersResponse>(getGetApiUsersUrl(), {
    ...options,
    method: 'GET',
  });
};

export const getGetApiUsersKey = () => [`/api/users`] as const;

export type GetApiUsersQueryResult = NonNullable<Awaited<ReturnType<typeof getApiUsers>>>;
export type GetApiUsersQueryError = GetApiUsers500;

export const useGetApiUsers = <TError = GetApiUsers500>(options?: {
  swr?: SWRConfiguration<Awaited<ReturnType<typeof getApiUsers>>, TError> & { swrKey?: Key; enabled?: boolean };
  request?: SecondParameter<typeof customFetch>;
}) => {
  const { swr: swrOptions, request: requestOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false;
  const swrKey = swrOptions?.swrKey ?? (() => (isEnabled ? getGetApiUsersKey() : null));
  const swrFn = () => getApiUsers(requestOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions);

  return {
    swrKey,
    ...query,
  };
};

/**
 * „É¶„Éº„Ç∂„Éº„ÅÆ‰ΩúÊàê
 */
export type postApiUsersResponse201 = {
  data: PostApiUsers201Item[];
  status: 201;
};

export type postApiUsersResponse500 = {
  data: PostApiUsers500;
  status: 500;
};

export type postApiUsersResponseSuccess = postApiUsersResponse201 & {
  headers: Headers;
};
export type postApiUsersResponseError = postApiUsersResponse500 & {
  headers: Headers;
};

export type postApiUsersResponse = postApiUsersResponseSuccess | postApiUsersResponseError;

export const getPostApiUsersUrl = () => {
  return `/api/users`;
};

export const postApiUsers = async (
  postApiUsersBody: PostApiUsersBody,
  options?: RequestInit
): Promise<postApiUsersResponse> => {
  return customFetch<postApiUsersResponse>(getPostApiUsersUrl(), {
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(postApiUsersBody),
  });
};

export const getPostApiUsersMutationFetcher = (options?: SecondParameter<typeof customFetch>) => {
  return (_: Key, { arg }: { arg: PostApiUsersBody }) => {
    return postApiUsers(arg, options);
  };
};
export const getPostApiUsersMutationKey = () => [`/api/users`] as const;

export type PostApiUsersMutationResult = NonNullable<Awaited<ReturnType<typeof postApiUsers>>>;
export type PostApiUsersMutationError = PostApiUsers500;

export const usePostApiUsers = <TError = PostApiUsers500>(options?: {
  swr?: SWRMutationConfiguration<
    Awaited<ReturnType<typeof postApiUsers>>,
    TError,
    Key,
    PostApiUsersBody,
    Awaited<ReturnType<typeof postApiUsers>>
  > & { swrKey?: string };
  request?: SecondParameter<typeof customFetch>;
}) => {
  const { swr: swrOptions, request: requestOptions } = options ?? {};

  const swrKey = swrOptions?.swrKey ?? getPostApiUsersMutationKey();
  const swrFn = getPostApiUsersMutationFetcher(requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions);

  return {
    swrKey,
    ...query,
  };
};
