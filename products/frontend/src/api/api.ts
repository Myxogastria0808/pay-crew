/**
 * Generated by orval v7.13.2 üç∫
 * Do not edit manually.
 * Echo API
 * Âèó„ÅëÂèñ„Å£„ÅüÂÖ•ÂäõÂÄ§„Çí„Åù„ÅÆ„Åæ„ÅæÂøúÁ≠î„Åô„ÇãAPI
 * OpenAPI spec version: 1.0.0
 */
import useSwr from 'swr';
import type { Key, SWRConfiguration } from 'swr';

import useSWRMutation from 'swr/mutation';
import type { SWRMutationConfiguration } from 'swr/mutation';

import type {
  DeleteApiHistory200,
  DeleteApiHistory500,
  DeleteApiHistoryBody,
  GetApiHistory200Item,
  GetApiHistory500,
  PostApiHistory201,
  PostApiHistory500,
  PostApiHistoryBody,
} from './api.schemas';

import { customFetch } from './customFetch';

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * Â±•Ê≠¥„ÅÆÂèñÂæó
 */
export type getApiHistoryResponse200 = {
  data: GetApiHistory200Item[];
  status: 200;
};

export type getApiHistoryResponse500 = {
  data: GetApiHistory500;
  status: 500;
};

export type getApiHistoryResponseSuccess = getApiHistoryResponse200 & {
  headers: Headers;
};
export type getApiHistoryResponseError = getApiHistoryResponse500 & {
  headers: Headers;
};

export type getApiHistoryResponse = getApiHistoryResponseSuccess | getApiHistoryResponseError;

export const getGetApiHistoryUrl = () => {
  return `/api/history`;
};

export const getApiHistory = async (options?: RequestInit): Promise<getApiHistoryResponse> => {
  return customFetch<getApiHistoryResponse>(getGetApiHistoryUrl(), {
    ...options,
    method: 'GET',
  });
};

export const getGetApiHistoryKey = () => [`/api/history`] as const;

export type GetApiHistoryQueryResult = NonNullable<Awaited<ReturnType<typeof getApiHistory>>>;
export type GetApiHistoryQueryError = GetApiHistory500;

export const useGetApiHistory = <TError = GetApiHistory500>(options?: {
  swr?: SWRConfiguration<Awaited<ReturnType<typeof getApiHistory>>, TError> & { swrKey?: Key; enabled?: boolean };
  request?: SecondParameter<typeof customFetch>;
}) => {
  const { swr: swrOptions, request: requestOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false;
  const swrKey = swrOptions?.swrKey ?? (() => (isEnabled ? getGetApiHistoryKey() : null));
  const swrFn = () => getApiHistory(requestOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions);

  return {
    swrKey,
    ...query,
  };
};

/**
 * Â±•Ê≠¥„ÅÆËøΩÂä†
 */
export type postApiHistoryResponse201 = {
  data: PostApiHistory201;
  status: 201;
};

export type postApiHistoryResponse500 = {
  data: PostApiHistory500;
  status: 500;
};

export type postApiHistoryResponseSuccess = postApiHistoryResponse201 & {
  headers: Headers;
};
export type postApiHistoryResponseError = postApiHistoryResponse500 & {
  headers: Headers;
};

export type postApiHistoryResponse = postApiHistoryResponseSuccess | postApiHistoryResponseError;

export const getPostApiHistoryUrl = () => {
  return `/api/history`;
};

export const postApiHistory = async (
  postApiHistoryBody: PostApiHistoryBody,
  options?: RequestInit
): Promise<postApiHistoryResponse> => {
  return customFetch<postApiHistoryResponse>(getPostApiHistoryUrl(), {
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(postApiHistoryBody),
  });
};

export const getPostApiHistoryMutationFetcher = (options?: SecondParameter<typeof customFetch>) => {
  return (_: Key, { arg }: { arg: PostApiHistoryBody }) => {
    return postApiHistory(arg, options);
  };
};
export const getPostApiHistoryMutationKey = () => [`/api/history`] as const;

export type PostApiHistoryMutationResult = NonNullable<Awaited<ReturnType<typeof postApiHistory>>>;
export type PostApiHistoryMutationError = PostApiHistory500;

export const usePostApiHistory = <TError = PostApiHistory500>(options?: {
  swr?: SWRMutationConfiguration<
    Awaited<ReturnType<typeof postApiHistory>>,
    TError,
    Key,
    PostApiHistoryBody,
    Awaited<ReturnType<typeof postApiHistory>>
  > & { swrKey?: string };
  request?: SecondParameter<typeof customFetch>;
}) => {
  const { swr: swrOptions, request: requestOptions } = options ?? {};

  const swrKey = swrOptions?.swrKey ?? getPostApiHistoryMutationKey();
  const swrFn = getPostApiHistoryMutationFetcher(requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions);

  return {
    swrKey,
    ...query,
  };
};

/**
 * Â±•Ê≠¥„ÅÆÂâäÈô§
 */
export type deleteApiHistoryResponse200 = {
  data: DeleteApiHistory200;
  status: 200;
};

export type deleteApiHistoryResponse500 = {
  data: DeleteApiHistory500;
  status: 500;
};

export type deleteApiHistoryResponseSuccess = deleteApiHistoryResponse200 & {
  headers: Headers;
};
export type deleteApiHistoryResponseError = deleteApiHistoryResponse500 & {
  headers: Headers;
};

export type deleteApiHistoryResponse = deleteApiHistoryResponseSuccess | deleteApiHistoryResponseError;

export const getDeleteApiHistoryUrl = () => {
  return `/api/history`;
};

export const deleteApiHistory = async (
  deleteApiHistoryBody: DeleteApiHistoryBody,
  options?: RequestInit
): Promise<deleteApiHistoryResponse> => {
  return customFetch<deleteApiHistoryResponse>(getDeleteApiHistoryUrl(), {
    ...options,
    method: 'DELETE',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(deleteApiHistoryBody),
  });
};

export const getDeleteApiHistoryMutationFetcher = (options?: SecondParameter<typeof customFetch>) => {
  return (_: Key, { arg }: { arg: DeleteApiHistoryBody }) => {
    return deleteApiHistory(arg, options);
  };
};
export const getDeleteApiHistoryMutationKey = () => [`/api/history`] as const;

export type DeleteApiHistoryMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiHistory>>>;
export type DeleteApiHistoryMutationError = DeleteApiHistory500;

export const useDeleteApiHistory = <TError = DeleteApiHistory500>(options?: {
  swr?: SWRMutationConfiguration<
    Awaited<ReturnType<typeof deleteApiHistory>>,
    TError,
    Key,
    DeleteApiHistoryBody,
    Awaited<ReturnType<typeof deleteApiHistory>>
  > & { swrKey?: string };
  request?: SecondParameter<typeof customFetch>;
}) => {
  const { swr: swrOptions, request: requestOptions } = options ?? {};

  const swrKey = swrOptions?.swrKey ?? getDeleteApiHistoryMutationKey();
  const swrFn = getDeleteApiHistoryMutationFetcher(requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions);

  return {
    swrKey,
    ...query,
  };
};
